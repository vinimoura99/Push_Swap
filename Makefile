# **************************************************************************** #
#                                                                              #
#                  ‚ú® PUSH_SWAP - A M√ÅQUINA DE ORDENA√á√ÉO ‚ú®                    #
#                                                                              #
#    Feito com ‚òï e muito <3 por: vmoura-d <vmoura-d@student.42porto.com>      #
#                                                                              #
# **************************************************************************** #

# ----------------------------- CONFIGURA√á√ïES DO PROJETO ------------------------------ #
# Compilador e Flags
CC = gcc
CFLAGS = -Wall -Wextra -Werror -g # Adicione -fsanitize=address para debug de mem√≥ria hardcore!
RM = rm -f

# Nome do Execut√°vel M√°gico
NAME = push_swap

# Diret√≥rios
OBJS_DIR = objs
# Diret√≥rios onde os arquivos .c est√£o escondidos (o VPATH cuida da m√°gica)
SRCS_DIRS = Main Error Stack Ranking Operations Sorting Utils

# Arquivos Fonte (apenas os nomes base, o VPATH faz a m√°gica de encontr√°-los)
# Listamos todos os seus guerreiros .c aqui!
SRCS_BASENAMES = main.c main_utils.c \
                 error.c \
                 new_node.c stack_free.c stack_init.c stack_push.c \
                 ranking.c ranking_utils.c \
                 operations_swap.c operations_push.c operations_rotate.c operations_rev_rotate.c \
                 sort_small.c sort_radix.c sort_two.c sort_three.c sort_four.c sort_five.c \
                 utils.c utils_split.c

# Arquivos Objeto (ser√£o criados em $(OBJS_DIR)/)
OBJS = $(addprefix $(OBJS_DIR)/, $(SRCS_BASENAMES:.c=.o))

# VPATH: Onde o Make deve procurar pelos arquivos fonte. A ordem importa se houver nomes duplicados!
VPATH = $(SRCS_DIRS)

# Cores para mensagens √©picas! (Porque a vida √© muito curta para terminais monocrom√°ticos)
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
CYAN := \033[0;36m
RED := \033[0;31m
BOLD := \033[1m
NC := \033[0m # Sem Cor (para voltar ao normal)

# Efeitos de Loading (simples, mas charmoso)
LOADING_CHARS = ‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è
define SLEEP_AND_ECHO
    @printf "$(1)$(2) %s\r" $(shell echo '$(LOADING_CHARS)' | cut -c $$(($(3)%10+1))); \
    sleep 0.1;
endef

# --------------------------------- REGRAS DE COMPILA√á√ÉO ---------------------------------- #
all: welcome $(NAME)

$(NAME): $(OBJS)
	@echo "$(YELLOW)üîó Ligando os m√≥dulos... $(BOLD)QUASE L√Å!$(NC) ‚ú®"
	@$(call SLEEP_AND_ECHO,$(YELLOW),üîó Ligando os m√≥dulos...,1)
	@$(call SLEEP_AND_ECHO,$(YELLOW),üîó Ligando os m√≥dulos...,2)
	@$(call SLEEP_AND_ECHO,$(YELLOW),üîó Ligando os m√≥dulos...,3)
	@$(CC) $(CFLAGS) -o $(NAME) $(OBJS)
	@echo ""
	@echo "$(GREEN)==================================================================$(NC)"
	@echo "$(GREEN)üöÄ $(BOLD)$(NAME)$(NC) compilado com SUCESSO TOTAL! Prepare-se para o PUSH e SWAP! üöÄ$(NC)"
	@echo "$(GREEN)==================================================================$(NC)"
	@echo "$(CYAN)Para executar: ./$(NAME) <lista de n√∫meros>$(NC)"
	@echo "$(CYAN)Exemplo: ./$(NAME) \"3 1 2\" ou ./$(NAME) 4 8 2 9 1 5$(NC)"
	@echo ""

# Regra para compilar arquivos .c para .o no diret√≥rio $(OBJS_DIR)
# $< √© o primeiro pr√©-requisito (o arquivo .c)
# $@ √© o nome do alvo (o arquivo .o)
$(OBJS_DIR)/%.o: %.c push_swap.h Makefile
	@mkdir -p $(OBJS_DIR) # Cria o diret√≥rio de objetos se n√£o existir (m√°gica silenciosa)
	@printf "$(BLUE)‚öôÔ∏è  Compilando $(BOLD)%s$(NC)... Segure firme nos seus bits e bytes! üíæ\n" $<
	@$(CC) $(CFLAGS) -c $< -o $@

# --------------------------- COMANDOS DE LIMPEZA PROFUNDA ----------------------------- #
clean:
	@echo "$(RED)üßπ Limpando a √°rea... Varrendo $(BOLD)$(OBJS_DIR)$(NC) para debaixo do tapete digital... üßπ"
	@$(call SLEEP_AND_ECHO,$(RED),üßπ Limpando...,1)
	@$(RM) -r $(OBJS_DIR)
	@echo "$(GREEN)‚ú® Arquivos objeto evaporados! Puff! Como se nunca tivessem existido! ‚ú®$(NC)"

fclean: clean
	@echo "$(RED)üí£ Efetuando faxina n√≠vel hard... $(BOLD)$(NAME)$(NC) est√° prestes a virar poeira c√≥smica! üí£"
	@$(call SLEEP_AND_ECHO,$(RED),üí£ Desintegrando $(NAME)...,1)
	@$(RM) $(NAME)
	@echo "$(GREEN)üí• $(BOLD)$(NAME)$(NC) foi desintegrado da exist√™ncia! Thanos ficaria orgulhoso! üí•$(NC)"

re:
	@echo "$(YELLOW)üõ†Ô∏è  Modo F√™nix ativado! Reconstruindo $(BOLD)$(NAME)$(NC) das cinzas... üî•"
	@$(MAKE) fclean --no-print-directory
	@$(MAKE) all --no-print-directory
	@echo "$(GREEN)‚ú® $(BOLD)$(NAME)$(NC) renasceu mais forte e brilhante do que nunca! ‚ú®$(NC)"

# ---------------------------- MENSAGENS CINEMATOGR√ÅFICAS ----------------------------- #
welcome:
	@echo "$(CYAN)==================================================================$(NC)"
	@echo "$(CYAN)‚ú® Bem-vindo ao $(BOLD)Push_Swap Construtor Autom√°gico 9001$(NC)! ‚ú®$(NC)"
	@echo "$(CYAN)Preparando para transformar c√≥digo em pura magia de ordena√ß√£o...$(NC)"
	@echo "$(CYAN)Apertem os cintos, a compila√ß√£o vai come√ßar!$(NC)"
	@echo "$(CYAN)==================================================================$(NC)"
	@$(call SLEEP_AND_ECHO,$(YELLOW),üöÄ Iniciando sequ√™ncia...,1)
	@$(call SLEEP_AND_ECHO,$(YELLOW),üöÄ Iniciando sequ√™ncia...,2)
	@$(call SLEEP_AND_ECHO,$(YELLOW),üöÄ Iniciando sequ√™ncia...,3)
	@printf "\n"

# Alvos Falsos (targets que n√£o s√£o arquivos reais, mas a√ß√µes)
.PHONY: all clean fclean re welcome

# Comente a linha abaixo se quiser ver os comandos que o Make est√° executando (para debug)
# .SILENT: